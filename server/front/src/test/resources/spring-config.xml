<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns="http://www.springframework.org/schema/beans"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
        http://www.springframework.org/schema/task
        http://www.springframework.org/schema/task/spring-task-4.1.xsd
		"
       default-lazy-init="true">

    <bean id="configurer" class="com.rmkj.microcap.common.utils.CustomPropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <!--测试环境-->
                <value>classpath:resources.properties</value>
                <!--外网环境-->
                <!--<value>classpath:server-resources.properties</value>-->
                <value>classpath:spring-mvc-resources.properties</value>
            </list>
        </property>
    </bean>

    <!-- 扫描注解Bean -->
    <!--只对一些事务逻辑的注解扫描。排除controller-->
    <context:component-scan base-package="com.rmkj.microcap"
                            name-generator="com.rmkj.microcap.common.handler.SpringBeanNameGenerator">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
    <!-- 配置 JSR303 bean Validator 定义 -->
    <!--<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean"/>-->

    <!--自定义名称生成器-->
    <bean id="CustomNameGenerator" class="com.rmkj.microcap.common.handler.SpringBeanNameGenerator"></bean>

    <!--事务以及数据源配置-->
    <bean id="doctorSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="configLocation" value="classpath:/mybatis-config.xml"></property>
        <property name="dataSource" ref="dataSource"/>
        <property name="mapperLocations" value="classpath:/mappings/**/*.xml"/>
    </bean>
    <!--扫描basePackage下所有以@MyBatisDao注解的接口-->
    <bean id="doctorScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="doctorSessionFactory"/>
        <property name="basePackage" value="com.rmkj.microcap"/>
        <property name="annotationClass" value="com.rmkj.microcap.common.bean.annotation.DataSource"/>
        <property name="nameGenerator" ref="CustomNameGenerator"></property>
    </bean>
    <!-- 事务 -->
    <bean id="doctorTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!-- 数据源-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
          destroy-method="close">
        <!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
        <property name="driverClassName" value="${jdbc.driver}"/>
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${jdbc.pool.init}"/>
        <property name="minIdle" value="${jdbc.pool.minIdle}"/>
        <property name="maxActive" value="${jdbc.pool.maxActive}"/>
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>
        <property name="validationQuery" value="${jdbc.testSql}"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>
    </bean>
    <!-- 配置 Annotation 驱动，扫描@Transactional注解的类定义事务  -->
    <tx:annotation-driven transaction-manager="doctorTransactionManager" proxy-target-class="true"/>
    <!--事务以及数据源配置结束-->

    <!--注册加载retrofit服务的processor 只能在非controller中使用-->
    <bean id="retrofitProcessor" class="com.rmkj.microcap.common.modules.retrofit.processor.RetrofitAutowiredProcessor"></bean>

    <!--配置微信服务-->
    <bean class="com.rmkj.microcap.common.modules.weixin.mapper.WeiXinScannerConfigurer">
        <property name="basePackage" value="com.rmkj.microcap.modules.api.weixin.service"/>
    </bean>

    <!-- 任务计划 -->
    <task:annotation-driven executor="myExecutor" scheduler="myScheduler"/>
    <task:executor id="myExecutor" pool-size="10" queue-capacity="100"/>
    <task:scheduler id="myScheduler" pool-size="10"/>

</beans>